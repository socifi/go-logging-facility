package log

import (
	"bytes"
	"errors"
	"strings"
)

// ErrInvalidLevel is returned if the severity level is invalid.
var ErrInvalidLevel = errors.New("invalid level")

// Level of severity.
type Level int

// Log levels.
const (
	InvalidLevel Level = -1
	/********* Level numbers *********/
/* WARNING: This part is autogenerated! Do not change! */

	DebugLevel = 100
	InfoLevel = 200
	NoticeLevel = 250
	WarnLevel = 300
	ErrorLevel = 400
	CriticalLevel = 500
	AlertLevel = 550
	FatalLevel = 600
	EmergencyLevel = 600

/* END OF WARNING */
	/********* End Level numbers *********/
)

var levelNames = [...]string{
	/********* Level no:name *********/
/* WARNING: This part is autogenerated! Do not change! */

	DebugLevel:	"Debug",
	InfoLevel:	"Info",
	NoticeLevel:	"Notice",
	WarnLevel:	"Warn",
	ErrorLevel:	"Error",
	CriticalLevel:	"Critical",
	AlertLevel:	"Alert",
	FatalLevel:	"Fatal",

/* END OF WARNING */
	/********* End Level no:name *********/
}

var levelStrings = map[string]Level{
	/********* Level name:no *********/
/* WARNING: This part is autogenerated! Do not change! */

	"Debug":	DebugLevel,
	"Info":	InfoLevel,
	"Notice":	NoticeLevel,
	"Warn":	WarnLevel,
	"Error":	ErrorLevel,
	"Critical":	CriticalLevel,
	"Alert":	AlertLevel,
	"Fatal":	FatalLevel,
	"Emergency":	EmergencyLevel,

/* END OF WARNING */
	/********* End Level name:no *********/
}

// String implementation.
func (l Level) String() string {
	return levelNames[int(l)]
}

// String implementation.
func (l Level) Int() int {
	return int(l)
}

// MarshalJSON implementation.
func (l Level) MarshalJSON() ([]byte, error) {
	return []byte(`"` + l.String() + `"`), nil
}

// UnmarshalJSON implementation.
func (l *Level) UnmarshalJSON(b []byte) error {
	v, err := ParseLevel(string(bytes.Trim(b, `"`)))
	if err != nil {
		return err
	}

	*l = v
	return nil
}

// ParseLevel parses level string.
func ParseLevel(s string) (Level, error) {
	l, ok := levelStrings[strings.ToLower(s)]
	if !ok {
		return InvalidLevel, ErrInvalidLevel
	}

	return l, nil
}

// MustParseLevel parses level string or panics.
func MustParseLevel(s string) Level {
	l, err := ParseLevel(s)
	if err != nil {
		panic("invalid log level")
	}

	return l
}
